#![allow(dead_code)]

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum HloOpcode {
  Abs,
  Add,
  AddDependency,
  AfterAll,
  AllGather,
  AllGatherDone,
  AllGatherStart,
  AllReduce,
  AllReduceDone,
  AllReduceStart,
  AllToAll,
  And,
  AsyncDone,
  AsyncStart,
  AsyncUpdate,
  Atan2,
  BatchNormGrad,
  BatchNormInference,
  BatchNormTraining,
  Bitcast,
  BitcastConvert,
  Broadcast,
  Call,
  Cbrt,
  Ceil,
  Cholsky,
  Clamp,
  Clz,
  CollectivePermute,
  CollectivePermuteDone,
  CollectivePermuteStart,
  Compare,
  Complex,
  Concatenate,
  Conditional,
  Constant,
  Convert,
  Convolution,
  Copy,
  CopyDone,
  CopyStart,
  Cos,
  CustomCall,
  Divide,
  Domain,
  Dot,
  DynamicReshape,
  DynamicSlice,
  DynamicUpdateSlice,
  Erf,
  Exp,
  Expm1,
  Fft,
  Floor,
  Fusion,
  Gather,
  GetDimensionSize,
  GetTupleElement,
  Imag,
  Infeed,
  Iota,
  IsFinite,
  Log,
  Log1p,
  Logistic,
  Map,
  Maximum,
  Minimum,
  Multiply,
  Negate,
  Not,
  OptimizationBarrier,
  Or,
  Outfeed,
  Pad,
  Parameter,
  PartitionId,
  PopulationCount,
  Power,
  Real,
  Recv,
  RecvDone,
  Reduce,
  ReducePrecision,
  ReduceScatter,
  ReduceWindow,
  Remainder,
  ReplicaId,
  Reshape,
  Reverse,
  Rng,
  RngBitGenerator,
  RngGetAndUpdateState,
  RoundNearestAfz,
  RoundNearestEven,
  Rsqrt,
  Scatter,
  Select,
  SelectAndScatter,
  Send,
  SendDone,
  SetDimensionSize,
  ShiftLeft,
  ShiftRightArithmetic,
  ShiftRightLogical,
  Sign,
  Sin,
  Slice,
  Sort,
  Sqrt,
  StochasticConvert,
  Subtract,
  Tan,
  Tanh,
  TopK,
  Transpose,
  TriangularSolve,
  Tuple,
  While,
  Xor,
}

pub fn hlo_opcode_string(opcode: &HloOpcode) -> String {
  match opcode {
    HloOpcode::Abs => "abs".to_string(),
    HloOpcode::Add => "add".to_string(),
    HloOpcode::AddDependency => "add-dependency".to_string(),
    HloOpcode::AfterAll => "after-all".to_string(),
    HloOpcode::AllGather => "all-gather".to_string(),
    HloOpcode::AllGatherDone => "all-gather-done".to_string(),
    HloOpcode::AllGatherStart => "all-gather-start".to_string(),
    HloOpcode::AllReduce => "all-reduce".to_string(),
    HloOpcode::AllReduceDone => "all-reduce-done".to_string(),
    HloOpcode::AllReduceStart => "all-reduce-start".to_string(),
    HloOpcode::AllToAll => "all-to-all".to_string(),
    HloOpcode::And => "and".to_string(),
    HloOpcode::AsyncDone => "async-done".to_string(),
    HloOpcode::AsyncStart => "async-start".to_string(),
    HloOpcode::AsyncUpdate => "async-update".to_string(),
    HloOpcode::Atan2 => "atan2".to_string(),
    HloOpcode::BatchNormGrad => "batch-norm-grad".to_string(),
    HloOpcode::BatchNormInference => "batch-norm-inference".to_string(),
    HloOpcode::BatchNormTraining => "batch-norm-training".to_string(),
    HloOpcode::Bitcast => "bitcast".to_string(),
    HloOpcode::BitcastConvert => "bitcast-convert".to_string(),
    HloOpcode::Broadcast => "broadcsat".to_string(),
    HloOpcode::Call => "call".to_string(),
    HloOpcode::Cbrt => "cbrt".to_string(),
    HloOpcode::Ceil => "ceil".to_string(),
    HloOpcode::Cholsky => "cholsky".to_string(),
    HloOpcode::Clamp => "clamp".to_string(),
    HloOpcode::Clz => "count-leading-zeros".to_string(),
    HloOpcode::CollectivePermute => "collective-permute".to_string(),
    HloOpcode::CollectivePermuteDone => "collective-permute-done".to_string(),
    HloOpcode::CollectivePermuteStart => "collective-permute-start".to_string(),
    HloOpcode::Compare => "compare".to_string(),
    HloOpcode::Complex => "complex".to_string(),
    HloOpcode::Concatenate => "concatenate".to_string(),
    HloOpcode::Conditional => "conditional".to_string(),
    HloOpcode::Constant => "constant".to_string(),
    HloOpcode::Convert => "convert".to_string(),
    HloOpcode::Convolution => "convolution".to_string(),
    HloOpcode::Copy => "copy".to_string(),
    HloOpcode::CopyDone => "copy-done".to_string(),
    HloOpcode::CopyStart => "copy-start".to_string(),
    HloOpcode::Cos => "cos".to_string(),
    HloOpcode::CustomCall => "custom-call".to_string(),
    HloOpcode::Divide => "divide".to_string(),
    HloOpcode::Domain => "domain".to_string(),
    HloOpcode::Dot => "dot".to_string(),
    HloOpcode::DynamicReshape => "dynamic-reshape".to_string(),
    HloOpcode::DynamicSlice => "dynamic-slice".to_string(),
    HloOpcode::DynamicUpdateSlice => "dynamic-update-slice".to_string(),
    HloOpcode::Erf => "erf".to_string(),
    HloOpcode::Exp => "exponential".to_string(),
    HloOpcode::Expm1 => "exponential-minus-one".to_string(),
    HloOpcode::Fft => "fft".to_string(),
    HloOpcode::Floor => "floor".to_string(),
    HloOpcode::Fusion => "fusion".to_string(),
    HloOpcode::Gather => "gather".to_string(),
    HloOpcode::GetDimensionSize => "get-dimension-size".to_string(),
    HloOpcode::GetTupleElement => "get-tuple-element".to_string(),
    HloOpcode::Imag => "imag".to_string(),
    HloOpcode::Infeed => "infeed".to_string(),
    HloOpcode::Iota => "iota".to_string(),
    HloOpcode::IsFinite => "is-finite".to_string(),
    HloOpcode::Log => "log".to_string(),
    HloOpcode::Log1p => "log-plus-one".to_string(),
    HloOpcode::Logistic => "logistic".to_string(),
    HloOpcode::Map => "map".to_string(),
    HloOpcode::Maximum => "maximum".to_string(),
    HloOpcode::Minimum => "minimum".to_string(),
    HloOpcode::Multiply => "multiply".to_string(),
    HloOpcode::Negate => "negate".to_string(),
    HloOpcode::Not => "not".to_string(),
    HloOpcode::OptimizationBarrier => "opt-barrier".to_string(),
    HloOpcode::Or => "or".to_string(),
    HloOpcode::Outfeed => "outfeed".to_string(),
    HloOpcode::Pad => "pad".to_string(),
    HloOpcode::Parameter => "parameter".to_string(),
    HloOpcode::PartitionId => "partition-id".to_string(),
    HloOpcode::PopulationCount => "pocnt".to_string(),
    HloOpcode::Power => "power".to_string(),
    HloOpcode::Real => "real".to_string(),
    HloOpcode::Recv => "recv".to_string(),
    HloOpcode::RecvDone => "recv-done".to_string(),
    HloOpcode::Reduce => "reduce".to_string(),
    HloOpcode::ReducePrecision => "reduce-precision".to_string(),
    HloOpcode::ReduceScatter => "reduce-scatter".to_string(),
    HloOpcode::ReduceWindow => "reduce-window".to_string(),
    HloOpcode::Remainder => "remainder".to_string(),
    HloOpcode::ReplicaId => "replica-id".to_string(),
    HloOpcode::Reshape => "reshape".to_string(),
    HloOpcode::Reverse => "reverse".to_string(),
    HloOpcode::Rng => "rng".to_string(),
    HloOpcode::RngBitGenerator => "rng-bit-generator".to_string(),
    HloOpcode::RngGetAndUpdateState => "rng-get-and-update-state".to_string(),
    HloOpcode::RoundNearestAfz => "round-nearest-afz".to_string(),
    HloOpcode::RoundNearestEven => "round-nearest-even".to_string(),
    HloOpcode::Rsqrt => "rsqrt".to_string(),
    HloOpcode::Scatter => "scatter".to_string(),
    HloOpcode::Select => "select".to_string(),
    HloOpcode::SelectAndScatter => "select-and-scatter".to_string(),
    HloOpcode::Send => "send".to_string(),
    HloOpcode::SendDone => "send-done".to_string(),
    HloOpcode::SetDimensionSize => "set-dimension-size".to_string(),
    HloOpcode::ShiftLeft => "shift-left".to_string(),
    HloOpcode::ShiftRightArithmetic => "shift-right-arithmetic".to_string(),
    HloOpcode::ShiftRightLogical => "shift-right-logical".to_string(),
    HloOpcode::Sign => "sign".to_string(),
    HloOpcode::Sin => "sin".to_string(),
    HloOpcode::Slice => "slice".to_string(),
    HloOpcode::Sort => "sort".to_string(),
    HloOpcode::Sqrt => "sqrt".to_string(),
    HloOpcode::StochasticConvert => "stochastic-convert".to_string(),
    HloOpcode::Subtract => "subtract".to_string(),
    HloOpcode::Tan => "tan".to_string(),
    HloOpcode::Tanh => "tanh".to_string(),
    HloOpcode::TopK => "topk".to_string(),
    HloOpcode::Transpose => "transpose".to_string(),
    HloOpcode::TriangularSolve => "triangular-solve".to_string(),
    HloOpcode::Tuple => "tuple".to_string(),
    HloOpcode::While => "while".to_string(),
    HloOpcode::Xor => "xor".to_string(),
  }
}

pub fn string_to_hlo_opcode() {}

pub fn hlo_opcode_is_comparison(opcode: &HloOpcode) -> bool {
  *opcode == HloOpcode::Compare
}

pub fn hlo_opcode_is_variadic(opcode: &HloOpcode) -> bool {
  match opcode {
    HloOpcode::AfterAll => true,
    HloOpcode::AllGather => true,
    HloOpcode::AllGatherStart => true,
    HloOpcode::AllReduce => true,
    HloOpcode::AllReduceStart => true,
    HloOpcode::AllToAll => true,
    HloOpcode::AsyncStart => true,
    HloOpcode::Call => true,
    HloOpcode::CollectivePermute => true,
    HloOpcode::CollectivePermuteStart => true,
    HloOpcode::Concatenate => true,
    HloOpcode::Conditional => true,
    HloOpcode::CustomCall => true,
    HloOpcode::DynamicReshape => true,
    HloOpcode::DynamicSlice => true,
    HloOpcode::DynamicUpdateSlice => true,
    HloOpcode::Fusion => true,
    HloOpcode::Map => true,
    HloOpcode::Reduce => true,
    HloOpcode::ReduceScatter => true,
    HloOpcode::ReduceWindow => true,
    HloOpcode::Rng => true,
    HloOpcode::Scatter => true,
    HloOpcode::Sort => true,
    HloOpcode::Tuple => true,
    _ => false,
  }
}

pub fn hlo_opcode_arity() {}

pub fn hlo_opcode_is_async(opcode: &HloOpcode) -> bool {
  *opcode == HloOpcode::AsyncStart || *opcode == HloOpcode::AsyncUpdate ||
  *opcode == HloOpcode::AsyncDone
}

pub fn hlo_opcode_is_binary_commutative(opcode: &HloOpcode) -> bool {
  match opcode {
    HloOpcode::Add => true,
    HloOpcode::Multiply => true,
    HloOpcode::Maximum => true,
    HloOpcode::And => true,
    HloOpcode::Or => true,
    HloOpcode::Xor => true,
    _ => false,
  }
}

pub fn hlo_opcode_count() -> usize {
  118
}